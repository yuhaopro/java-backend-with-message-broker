services:

  # java_backend:
  #   container_name: java_backend
  #   image: acp_cw2
  #   networks:
  #     - acp_network
  #   ports:
  #     - 8080:8080
  #   environment:
  #     REDIS_HOST: host.docker.internal
  #     REDIS_PORT: 6379

  #     RABBITMQ_HOST: host.docker.internal
  #     RABBITMQ_PORT: 5672

  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9093
  #     ACP_STORAGE_SERVICE: https://acp-storage.azurewebsites.net/      
  #   depends_on:
  #     kafka:
  #       condition: service_started
  #       restart: true
  #     rabbitmq:
  #       condition: service_healthy
  #       restart: true
  #     redis:
  #       condition: service_healthy
  #       restart: true

  kafka:
    container_name: kafka
    image: apache/kafka-native
    networks:
      - acp_network
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.0-management
    ports:
      - "5672:5672"
      - "15672:15672"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:15672"]      
    #   interval: 10s
    #   retries: 5
    #   start_period: 30s
    #   timeout: 10s
  redis:
    container_name: redis
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    # healthcheck:
    #   test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
    #   interval: 1s
    #   timeout: 3s
    #   retries: 5

networks:
  acp_network:
    external: true
    